{"ast":null,"code":"import React,{useState,useEffect}from'react';import'../styles/request.css';import{requestPayout}from'../services/api';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Request=()=>{const[customerId,setCustomerId]=useState('');const[insuranceId,setInsuranceId]=useState('');const[responseMessage,setResponseMessage]=useState('');useEffect(()=>{const storedCustomerId=localStorage.getItem('customerId');if(storedCustomerId){setCustomerId(storedCustomerId);// 세션에서 customerId 읽기\n}},[]);const handleSubmit=async e=>{e.preventDefault();try{const data=await requestPayout(customerId,insuranceId);if(data){setResponseMessage(`요청 성공 : Status - ${data.status}, Amount - ${data.amount}`);}else{setResponseMessage('Error: No response data from the server.');}}catch(error){console.error('Request failed:',error);setResponseMessage(`요청 실패: ${error.message||'고객 아이디와 보험 아이디를 확인 해주세요'}`);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"request-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\uBCF4\\uD5D8\\uAE08 \\uC9C0\\uAE09 \\uC694\\uCCAD\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"request-form\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Customer ID:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:customerId,readOnly:true// 수정 불가\n})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Insurance ID:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:insuranceId,onChange:e=>setInsuranceId(e.target.value),placeholder:\"Enter Insurance ID\",required:true})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"\\uC9C0\\uAE09 \\uC694\\uCCAD\"})]}),responseMessage&&/*#__PURE__*/_jsx(\"p\",{className:\"response-message\",children:responseMessage})]});};export default Request;","map":{"version":3,"names":["React","useState","useEffect","requestPayout","jsx","_jsx","jsxs","_jsxs","Request","customerId","setCustomerId","insuranceId","setInsuranceId","responseMessage","setResponseMessage","storedCustomerId","localStorage","getItem","handleSubmit","e","preventDefault","data","status","amount","error","console","message","className","children","onSubmit","type","value","readOnly","onChange","target","placeholder","required"],"sources":["/Users/patrick/git/test/front-customer/src/pages/Request.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/request.css';\nimport { requestPayout } from '../services/api';\n\nconst Request = () => {\n  const [customerId, setCustomerId] = useState('');\n  const [insuranceId, setInsuranceId] = useState('');\n  const [responseMessage, setResponseMessage] = useState('');\n\n  useEffect(() => {\n    const storedCustomerId = localStorage.getItem('customerId');\n    if (storedCustomerId) {\n      setCustomerId(storedCustomerId); // 세션에서 customerId 읽기\n    }\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      const data = await requestPayout(customerId, insuranceId);\n\n      if (data) {\n        setResponseMessage(\n          `요청 성공 : Status - ${data.status}, Amount - ${data.amount}`\n        );\n      } else {\n        setResponseMessage('Error: No response data from the server.');\n      }\n    } catch (error) {\n      console.error('Request failed:', error);\n      setResponseMessage(`요청 실패: ${error.message || '고객 아이디와 보험 아이디를 확인 해주세요'}`);\n    }\n  };\n\n  return (\n    <div className=\"request-container\">\n      <h1>보험금 지급 요청</h1>\n      <form onSubmit={handleSubmit} className=\"request-form\">\n        <label>\n          Customer ID:\n          <input\n            type=\"text\"\n            value={customerId}\n            readOnly // 수정 불가\n          />\n        </label>\n        <label>\n          Insurance ID:\n          <input\n            type=\"text\"\n            value={insuranceId}\n            onChange={(e) => setInsuranceId(e.target.value)}\n            placeholder=\"Enter Insurance ID\"\n            required\n          />\n        </label>\n        <button type=\"submit\">지급 요청</button>\n      </form>\n      {responseMessage && <p className=\"response-message\">{responseMessage}</p>}\n    </div>\n  );\n};\n\nexport default Request;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,uBAAuB,CAC9B,OAASC,aAAa,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEhD,KAAM,CAAAC,OAAO,CAAGA,CAAA,GAAM,CACpB,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACU,WAAW,CAAEC,cAAc,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACY,eAAe,CAAEC,kBAAkB,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAE1DC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAa,gBAAgB,CAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAC3D,GAAIF,gBAAgB,CAAE,CACpBL,aAAa,CAACK,gBAAgB,CAAC,CAAE;AACnC,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAG,YAAY,CAAG,KAAO,CAAAC,CAAC,EAAK,CAChCA,CAAC,CAACC,cAAc,CAAC,CAAC,CAElB,GAAI,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAlB,aAAa,CAACM,UAAU,CAAEE,WAAW,CAAC,CAEzD,GAAIU,IAAI,CAAE,CACRP,kBAAkB,CAChB,oBAAoBO,IAAI,CAACC,MAAM,cAAcD,IAAI,CAACE,MAAM,EAC1D,CAAC,CACH,CAAC,IAAM,CACLT,kBAAkB,CAAC,0CAA0C,CAAC,CAChE,CACF,CAAE,MAAOU,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,CAAEA,KAAK,CAAC,CACvCV,kBAAkB,CAAC,UAAUU,KAAK,CAACE,OAAO,EAAI,yBAAyB,EAAE,CAAC,CAC5E,CACF,CAAC,CAED,mBACEnB,KAAA,QAAKoB,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAChCvB,IAAA,OAAAuB,QAAA,CAAI,8CAAS,CAAI,CAAC,cAClBrB,KAAA,SAAMsB,QAAQ,CAAEX,YAAa,CAACS,SAAS,CAAC,cAAc,CAAAC,QAAA,eACpDrB,KAAA,UAAAqB,QAAA,EAAO,cAEL,cAAAvB,IAAA,UACEyB,IAAI,CAAC,MAAM,CACXC,KAAK,CAAEtB,UAAW,CAClBuB,QAAQ,KAAC;AAAA,CACV,CAAC,EACG,CAAC,cACRzB,KAAA,UAAAqB,QAAA,EAAO,eAEL,cAAAvB,IAAA,UACEyB,IAAI,CAAC,MAAM,CACXC,KAAK,CAAEpB,WAAY,CACnBsB,QAAQ,CAAGd,CAAC,EAAKP,cAAc,CAACO,CAAC,CAACe,MAAM,CAACH,KAAK,CAAE,CAChDI,WAAW,CAAC,oBAAoB,CAChCC,QAAQ,MACT,CAAC,EACG,CAAC,cACR/B,IAAA,WAAQyB,IAAI,CAAC,QAAQ,CAAAF,QAAA,CAAC,2BAAK,CAAQ,CAAC,EAChC,CAAC,CACNf,eAAe,eAAIR,IAAA,MAAGsB,SAAS,CAAC,kBAAkB,CAAAC,QAAA,CAAEf,eAAe,CAAI,CAAC,EACtE,CAAC,CAEV,CAAC,CAED,cAAe,CAAAL,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}