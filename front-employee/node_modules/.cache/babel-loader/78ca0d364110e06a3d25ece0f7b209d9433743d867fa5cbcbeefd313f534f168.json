{"ast":null,"code":"// src/api.js\nimport axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080'; // 실제 API URL로 변경하세요\n\n// 보험 개발 API 호출 함수\nexport const createInsurance = async insuranceData => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/insurance/create`, insuranceData);\n    console.log('Insurance created successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to create insurance:', error);\n    throw new Error('보험 개발에 실패했습니다. 다시 시도해주세요.');\n  }\n};\n\n// 보험 가입 요청 조회\nexport const getInsuranceRequests = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/underwriting/pending`);\n    console.log('Insurance requests retrieved successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to retrieve insurance requests:', error);\n    throw new Error('보험 가입 요청 조회에 실패했습니다. 다시 시도해주세요.');\n  }\n};\n\n// 보험 가입 승인\nexport const approveInsuranceRequest = async contractId => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/underwriting/approve/${contractId}`);\n    console.log('Insurance request approved successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to approve insurance request:', error);\n    throw new Error('보험 가입 승인이 실패했습니다. 다시 시도해주세요.');\n  }\n};\n\n// 보험 가입 거절\nexport const rejectInsuranceRequest = async requestId => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/underwriting/reject/${requestId}`);\n    console.log('Insurance request rejected successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to reject insurance request:', error);\n    throw new Error('보험 가입 거절이 실패했습니다. 다시 시도해주세요.');\n  }\n};\n\n// 보험금 지급 조회\nexport const getInsurancePayments = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/api/payments`);\n    console.log('Insurance payments retrieved successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to retrieve insurance payments:', error);\n    throw new Error('보험금 지급 조회에 실패했습니다. 다시 시도해주세요.');\n  }\n};\n\n// 보험금 지급 승인\nexport const approveInsurancePayment = async id => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/api/payments/approve/${id}`);\n    console.log('Insurance payment approved successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to approve insurance payment:', error);\n    throw new Error('보험금 지급 승인이 실패했습니다. 다시 시도해주세요.');\n  }\n};\n\n// 보험금 지급 거절\nexport const rejectInsurancePayment = async id => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/api/payments/reject/${id}`);\n    console.log('Insurance payment rejected successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to reject insurance payment:', error);\n    throw new Error('보험금 지급 거절이 실패했습니다. 다시 시도해주세요.');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","createInsurance","insuranceData","response","post","console","log","data","error","Error","getInsuranceRequests","get","approveInsuranceRequest","contractId","put","rejectInsuranceRequest","requestId","getInsurancePayments","approveInsurancePayment","id","rejectInsurancePayment"],"sources":["/Users/patrick/git/Insurance_system/front-employee/src/api/api.js"],"sourcesContent":["// src/api.js\nimport axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8080'; // 실제 API URL로 변경하세요\n\n// 보험 개발 API 호출 함수\nexport const createInsurance = async (insuranceData) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/insurance/create`, insuranceData);\n    console.log('Insurance created successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to create insurance:', error);\n    throw new Error('보험 개발에 실패했습니다. 다시 시도해주세요.');\n  }\n};\n\n// 보험 가입 요청 조회\nexport const getInsuranceRequests = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/underwriting/pending`);\n    console.log('Insurance requests retrieved successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to retrieve insurance requests:', error);\n    throw new Error('보험 가입 요청 조회에 실패했습니다. 다시 시도해주세요.');\n  }\n};\n\n// 보험 가입 승인\nexport const approveInsuranceRequest = async (contractId) => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/underwriting/approve/${contractId}`);\n    console.log('Insurance request approved successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to approve insurance request:', error);\n    throw new Error('보험 가입 승인이 실패했습니다. 다시 시도해주세요.');\n  }\n};\n\n// 보험 가입 거절\nexport const rejectInsuranceRequest = async (requestId) => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/underwriting/reject/${requestId}`);\n    console.log('Insurance request rejected successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to reject insurance request:', error);\n    throw new Error('보험 가입 거절이 실패했습니다. 다시 시도해주세요.');\n  }\n};\n\n// 보험금 지급 조회\nexport const getInsurancePayments = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/api/payments`);\n    console.log('Insurance payments retrieved successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to retrieve insurance payments:', error);\n    throw new Error('보험금 지급 조회에 실패했습니다. 다시 시도해주세요.');\n  }\n};\n\n// 보험금 지급 승인\nexport const approveInsurancePayment = async (id) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/api/payments/approve/${id}`);\n    console.log('Insurance payment approved successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to approve insurance payment:', error);\n    throw new Error('보험금 지급 승인이 실패했습니다. 다시 시도해주세요.');\n  }\n};\n\n// 보험금 지급 거절\nexport const rejectInsurancePayment = async (id) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/api/payments/reject/${id}`);\n    console.log('Insurance payment rejected successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to reject insurance payment:', error);\n    throw new Error('보험금 지급 거절이 실패했습니다. 다시 시도해주세요.');\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}